
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async analyzeSeo(url: string) : Promise<Result<SeoAnalysis, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("analyze_seo", { url }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async crawlSeo(url: string) : Promise<Result<CrawlResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("crawl_seo", { url }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async analyzeCrawlSeo(url: string, crawlResult: CrawlResult, lighthouseEnabled: boolean) : Promise<Result<Partial<{ [key in string]: PageAnalysis }>, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("analyze_crawl_seo", { url, crawlResult, lighthouseEnabled }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
analysisProgress: AnalysisProgress
}>({
analysisProgress: "analysis-progress"
})

/** user-defined constants **/



/** user-defined types **/

export type AnalysisProgress = { total_urls: number; completed_urls: number; results: Partial<{ [key in string]: PageAnalysis }> }
export type AnalysisStatus = "Pending" | "InProgress" | "Complete" | { Failed: string }
export type CrawlResult = { urls: Partial<{ [key in string]: UrlSource }>; total_pages: number }
export type Headings = { h1: number; h2: number; h3: number }
export type Images = { total: number; with_alt: number; without_alt: number }
export type LighthouseMetrics = { performance_score: number; accessibility_score: number; best_practices_score: number; seo_score: number; pwa_score: number; first_contentful_paint: number; speed_index: number; largest_contentful_paint: number; time_to_interactive: number; total_blocking_time: number; cumulative_layout_shift: number }
export type Links = { internal: number; external: number }
export type MetaTagInfo = { title: string | null; description: string | null; keywords: string | null; robots: string | null; canonical: string | null; sitemap: string | null; favicon: string | null; viewport: string | null; generators: string[]; webmanifest: string | null; og_tags: Partial<{ [key in string]: string }>; scripts: string[]; styles: string[]; twitter_tags: Partial<{ [key in string]: string }> }
export type PageAnalysis = { url: string; path: string; meta_tags: MetaTagInfo; h1_count: number; image_alt_missing: number; broken_links: string[]; lighthouse_score: number | null; status: AnalysisStatus }
export type Performance = { load_time: string; mobile_responsive: boolean }
export type SeoAnalysis = { meta_tags: MetaTagInfo; headings: Headings; images: Images; links: Links; performance: Performance; lighthouse_metrics: LighthouseMetrics | null }
export type UrlSource = { found_in_links: boolean; found_in_sitemap: boolean }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
