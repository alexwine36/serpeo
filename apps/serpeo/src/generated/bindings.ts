
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async analyzeUrlSeo(url: string) : Promise<Result<CrawlResult, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("analyze_url_seo", { url }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSites() : Promise<Result<SiteWithSiteRuns[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_sites") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCategoryResult(siteRunId: number) : Promise<Result<CategoryResultDisplay, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_category_result", { siteRunId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSiteRunById(siteRunId: number) : Promise<Result<SiteRunModel, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_site_run_by_id", { siteRunId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSiteById(id: number) : Promise<Result<SiteModel, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_site_by_id", { id }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSiteRunLinkCounts(siteRunId: number) : Promise<Result<SitePageLinkCount[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_site_run_link_counts", { siteRunId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getCategoryResultDetail(siteRunId: number, passed: boolean | null) : Promise<Result<CategoryDetailResponse, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_category_result_detail", { siteRunId, passed }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async getSiteCategoryHistory(siteId: number) : Promise<Result<CategoryResultHistory[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("get_site_category_history", { siteId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/


export const events = __makeEvents__<{
analysisFinished: AnalysisFinished,
analysisProgress: AnalysisProgress,
analysisStart: AnalysisStart,
siteRunIdSet: SiteRunIdSet
}>({
analysisFinished: "analysis-finished",
analysisProgress: "analysis-progress",
analysisStart: "analysis-start",
siteRunIdSet: "site-run-id-set"
})

/** user-defined constants **/

export const CRAWL_SETTINGS_KEY = "crawl_settings" as const;
export const STORE_FILE = "store.json" as const;

/** user-defined types **/

export type AnalysisFinished = { site_run_id: number; result: CrawlResult }
export type AnalysisProgress = { progress_type: AnalysisProgressType; url: string | null; total_pages: number; completed_pages: number }
export type AnalysisProgressType = "FoundLink" | { AnalyzedPage: PageLink } | { AnalyzedSite: RuleResult[] }
export type AnalysisStart = { base_url: string }
export type CategoryDetailResponse = { data: Partial<{ [key in DbRuleCategory]: FlatRuleResult[] }> }
export type CategoryResult = { total: number; passed: number; failed: number }
export type CategoryResultDisplay = { data: Partial<{ [key in DbRuleCategory]: CategoryResult }>; total: number; passed: number; failed: number }
export type CategoryResultHistory = { data: Partial<{ [key in DbRuleCategory]: CategoryResult }>; created_at: string }
export type CrawlResult = { page_results: PageLink[]; site_result: RuleResult[]; total_pages: number }
export type CrawlSettingsStore = { max_concurrent_requests: number; request_delay_ms: number }
export type DbLinkType = "Internal" | "External" | "Mailto" | "Tel" | "Unknown"
export type DbRuleCategory = "Accessibility" | "Performance" | "BestPractices" | "SEO"
export type DbSeverity = "Info" | "Warning" | "Error" | "Critical"
export type FlatRuleResult = { rule_id: string; name: string; plugin_name: string; passed: boolean; message: string; severity: DbSeverity; category: DbRuleCategory; page_url: string }
export type LinkSourceType = "Sitemap" | "Root" | "Link"
export type LinkType = "Internal" | "External" | "Mailto" | "Tel" | "Unknown"
export type PageLink = { url: string; link_type: LinkType; found_in: PageLinkSource[]; result: PageResult | null }
export type PageLinkSource = { link_source_type: LinkSourceType; url: string }
export type PageResult = { error: boolean; results: RuleResult[] }
export type RuleCategory = "Accessibility" | "Performance" | "BestPractices" | "SEO"
export type RuleResult = { rule_id: string; name: string; plugin_name: string; passed: boolean; message: string; severity: Severity; category: RuleCategory; context: SiteCheckContext }
export type Severity = "Info" | "Warning" | "Error" | "Critical"
export type SiteCheckContext = { Urls: string[] } | { Values: Partial<{ [key in string]: string[] }> } | "Empty"
export type SiteModel = { id: number; name: string; url: string; created_at: string }
export type SitePageLinkCount = { db_link_type: DbLinkType; count: number }
export type SiteRunIdSet = { site_run_id: number }
export type SiteRunModel = { id: number; site_id: number; created_at: string; status: SiteRunStatus }
export type SiteRunStatus = "Pending" | "Running" | "Finished" | "Error"
export type SiteWithSiteRuns = { site: SiteModel; last_site_run_at: string; site_runs: SiteRunModel[] }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
