//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::enums::db_link_type::DbLinkType;

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, specta :: Type,
)]
#[sea_orm(table_name = "site_page")]
#[specta(rename = "SitePageModel")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub site_id: i32,
    pub site_run_id: i32,
    pub url: String,
    pub db_link_type: DbLinkType,
    pub created_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::page_rule_result::Entity")]
    PageRuleResult,
    #[sea_orm(
        belongs_to = "super::site::Entity",
        from = "Column::SiteId",
        to = "super::site::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    Site,
    #[sea_orm(
        belongs_to = "super::site_run::Entity",
        from = "Column::SiteRunId",
        to = "super::site_run::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SiteRun,
}

impl Related<super::page_rule_result::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PageRuleResult.def()
    }
}

impl Related<super::site::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Site.def()
    }
}

impl Related<super::site_run::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SiteRun.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
