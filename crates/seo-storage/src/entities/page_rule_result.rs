//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, specta :: Type,
)]
#[sea_orm(table_name = "page_rule_result")]
#[specta(rename = "PageRuleResultModel")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub site_page_id: i32,
    pub rule_id: String,
    pub passed: bool,
    pub created_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::plugin_rule::Entity",
        from = "Column::RuleId",
        to = "super::plugin_rule::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    PluginRule,
    #[sea_orm(
        belongs_to = "super::site_page::Entity",
        from = "Column::SitePageId",
        to = "super::site_page::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    SitePage,
}

impl Related<super::plugin_rule::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PluginRule.def()
    }
}

impl Related<super::site_page::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SitePage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
