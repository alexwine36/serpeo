//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11
#[cfg(test)]
use fake::Dummy;

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

use crate::enums::plugin_rule_enums::{DbRuleCategory, DbRuleType, DbSeverity};

#[derive(
    Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, specta :: Type,
)]
#[cfg_attr(test, derive(Dummy))]
#[sea_orm(table_name = "plugin_rule")]
#[specta(rename = "PluginRuleModel")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub name: String,
    pub plugin_name: String,
    pub description: String,
    pub severity: DbSeverity,
    pub category: DbRuleCategory,
    pub rule_type: DbRuleType,
    pub passed_message: String,
    pub failed_message: String,
    pub enabled: bool,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::page_rule_result::Entity")]
    PageRuleResult,
}

impl Related<super::page_rule_result::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PageRuleResult.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
